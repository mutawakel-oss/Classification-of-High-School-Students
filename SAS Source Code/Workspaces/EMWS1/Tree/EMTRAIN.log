MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 15, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:49:04" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 15, 2021
Time:                11:49:04
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O19407YR "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O19407YR new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 15, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:49:04" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                mutawakelm";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70166022";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M5P091317";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.3";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 15, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:49:04" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                mutawakelm";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22881      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
22882      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
22883      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

22884      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
22885      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22886      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22887      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22888      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22889      run;

NOTE: There were 3 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22890      title10;
MPRINT(EM_DIAGRAM):   title10;
22891      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN 
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN EMWS1 Stat_TRAIN 
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN 
EMWS1.Stat_TRAIN EMWS1.Stat_TRAIN EMWS1 Stat_TRAIN 
>>>>>>>>>>>>>> TARGET(   USE='Y' 
                         REPORT='N' 
                         NAME='final' 
                         ROLE='TARGET' 
                         LEVEL='INTERVAL' 
                         ORDER='' 
                         CREATOR='' 
                         FORMATTYPE='QUANTITY' 
                         FAMILY='' 
                         LOWERLIMIT=. 
                         UPPERLIMIT=. 
                         DISTRIBUTION='' 
                         COMMENT='' 
                         PRICE=. 
                         TYPE='N' 
                         LABEL='' 
                         FORMAT='BEST12.0' 
                         INFORMAT='BEST32.0' 
                         INDEX='N' 
                         INDEXTYPE='NONE' 
                         LENGTH=8 
                      )[16593] 
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Stat_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   final
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target final ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB 
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB 
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Tree_final_DD(type=PROFIT label= final);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Determine decision variables for final;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.Tree_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_TRAIN;
MPRINT(EM_DIAGRAM):   keep final;
MPRINT(EM_DIAGRAM):   keep 'P_final'n;
MPRINT(EM_DIAGRAM):   'P_final'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_final_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_final_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify final(type=PROFIT label= final);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_final_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_final_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
"No decisions defined for target "final"." 
22952      proc print data = EMWS1.Tree_final_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Tree_final_DM noobs label;
22953      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
22954      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
22955      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
22956      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22957      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
22958      run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_FINAL_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22959      title10;
MPRINT(EM_DIAGRAM):   title10;
22960      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify final(type=PROFIT label= final);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Second';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Classificaiton CW ASDM';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.final(label="final");
MPRINT(EM_DECDATA):   length final 8 ;
MPRINT(EM_DECDATA):   final=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   final=6;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   final=4.86578954873423;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify final(type=PROFIT label= final);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify final(type=PROFIT label= final);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="final";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_final_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_final_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="final";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_final_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_final_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
23434      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23435      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
23436      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
23437      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

23438      %let EMEXCEPTIONSTRING=;
23439      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23440      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
23441      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23442      %let EM_ACTION = TRAIN;
23443      %let syscc = 0;
23444      %macro main;
23445      
23446        %if %upcase(&EM_ACTION) = CREATE %then %do;
23447          filename temp catalog 'sashelp.emmodl.tree_create.source';
23448          %include temp;
23449          filename temp;
23450      
23451          %em_tree_create;
23452        %end;
23453      
23454         %else
23455         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23456      
23457             filename temp catalog 'sashelp.emmodl.tree_train.source';
23458             %include temp;
23459             filename temp;
23460             %em_tree_train;
23461         %end;
23462      
23463        %else
23464        %if %upcase(&EM_ACTION) = SCORE %then %do;
23465          filename temp catalog 'sashelp.emmodl.tree_score.source';
23466          %include temp;
23467          filename temp;
23468      
23469          %em_tree_score;
23470      
23471        %end;
23472      
23473        %else
23474        %if %upcase(&EM_ACTION) = REPORT %then %do;
23475      
23476             filename temp catalog 'sashelp.emmodl.tree_report.source';
23477             %include temp;
23478             filename temp;
23479      
23480             %em_tree_report;
23481         %end;
23482      
23483        %else
23484        %if %upcase(&EM_ACTION) = OPENINT %then %do;
23485      
23486             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23487             %include temp;
23488             filename temp;
23489             %EM_TREE_OPENTREEVIEWER;
23490      
23491         %end;
23492      
23493        %else
23494        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
23495      
23496             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23497             %include temp;
23498             filename temp;
23499             %EM_TREE_CLOSETREEVIEWER;
23500      
23501         %end;
23502      
23503      
23504         %doendm:
23505      %mend main;
23506      
23507      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
23509     +%macro em_tree_train;
23511     +   %if &EM_IMPORT_DATA eq %then %do;
23512     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
23513     +       %put &em_codebar;
23514     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
23515     +       %put &errormsg;
23516     +       %put &em_codebar;
23517     +       %goto doendm;
23518     +   %end;
23519     +   %else
23520     +       %let EMEXCEPTIONSTRING =;
23522     +   %if  &EM_NUM_TARGET lt 1 %then %do;
23523     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
23524     +        %put &em_codebar;
23525     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
23526     +        %put &errormsg;
23527     +        %put &em_codebar;
23528     +        %goto doendm;
23529     +   %end;
23531     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
23532     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
23533     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
23534     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
23535     +        %put &em_codebar;
23536     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
23537     +        %put &errormsg;
23538     +        %put &em_codebar;
23539     +        %goto doendm;
23540     +   %end;
23542     +   /* Initialize property macro variables */
23543     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
23544     +   %include temp;
23545     +   filename temp;
23547     +   %EM_SetProperties;
23549     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
23550     +   %EM_GETNAME(key=EMTREE, type=DATA);
23551     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
23552     +     /* if import eq Y and no importtable defined, throw an exception */
23553     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
23554     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
23555     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
23556     +         %put &em_codebar;
23557     +         %put &errmsg;
23558     +         %put &em_codebar;
23559     +         %goto doendm;
23560     +      %end;
23561     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
23562     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
23563     +         %put &em_codebar;
23564     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
23565     +         %put &errormsg;
23566     +         %put &em_codebar;
23567     +         %goto doendm;
23568     +      %end;
23569     +      %else %do;
23570     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
23571     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
23572     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
23573     +         %let varnumX = %sysfunc(varnum(&dsid,X));
23574     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
23575     +         %let dsid = %sysfunc(close(&dsid));
23576     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
23577     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
23578     +            %put &em_codebar;
23579     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
23580     +            %put &errormsg;
23581     +            %put &em_codebar;
23582     +            %goto doendm;
23583     +         %end;
23584     +      %end;
23585     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
23586     +         proc delete data=&EM_USER_EMTREE;
23587     +         run;
23588     +      %end;
23589     +   %end;
23590     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
23591     +      proc delete data=&EM_USER_EMTREE;
23592     +      run;
23593     +   %end;
23595     +   /* load tree macros */
23596     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
23597     +   %include temp;
23598     +   filename temp;
23600     +   /* data sets */
23601     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
23602     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
23603     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
23605     +   /* files */
23606     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
23608     +   /* check actual num of target levels */
23609     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
23610     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
23611     +                              nLevel=_nTargetLevel );
23612     +      %if &_nTargetLevel  > 2 %then %do;
23613     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
23614     +        %put &em_codebar;
23615     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
23616     +        %put &errormsg;
23617     +        %put &em_codebar;
23618     +        %goto doendm;
23619     +      %end;
23620     +   %end;
23622     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
23623     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
23624     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
23625     +        %let costflag=0;
23626     +        data _null_;
23627     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
23628     +          if eof then call symput("costflag", _N_);
23629     +        run;
23630     +        %if &costflag gt 0 %then %do;
23631     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
23632     +          %put &em_codebar;
23633     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
23634     +          %put &errormsg;
23635     +          %put &em_codebar;
23636     +          %goto doendm;
23637     +       %end;
23638     +     %end;
23639     +   %end;
23641     +   /* determine if multiple targets will be processed */
23642     +   %let em_tree_multipleTargets=N;
23643     +   %let em_tree_numTarget = 1;
23644     +   %let em_tree_targetVars=;
23646     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
23647     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
23648     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
23649     +         %let em_tree_multipleTargets=N;
23650     +      %end;
23651     +      %else %do;
23652     +         /* create macro array of targets  */
23653     +         data _null_;
23654     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
23655     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
23656     +           if eof then
23657     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
23658     +        run;
23660     +        %if &em_tree_numTarget gt 1 %then %do;
23661     +           %let em_tree_multipleTargets=Y;
23662     +        %end;
23663     +      %end;
23664     +   %end;
23666     +   /* create view of only necessary variable for performance reasons */
23667     +   %let tempData = &EM_LIB..em_&EM_NODEID;
23668     +   data &tempData / view=&tempData;
23669     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
23670     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
23671     +       %EM_TARGET
23672     +     %end;
23673     +     %else %do;
23674     +       %if &em_tree_numTarget ne 0 %then %do;
23675     +         %do i=1 %to &em_tree_numTarget;
23676     +            &&em_tree_targetVars&i
23677     +         %end;
23678     +       %end;
23679     +     %end;
23680     +     );
23681     +   run;
23683     +   /* run Tree procedure */
23684     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
23686     +   /* Check return code and throw exception if error is detected */
23687     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
23688     +   %if &syserr %then %do;
23689     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
23690     +     %goto doendm;
23691     +   %end;
23693     +   /* add decision score code if multiple targets are processed */
23694     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
23695     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
23696     +   %end;
23698     +   /* create outfit dataset if multiple score statements have been executed */
23699     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
23701     +   /* create English Rules */
23702     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
23703     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
23704     +       %em_tree_makeEnglishRules;
23706     +       /* English Rules */
23707     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
23709     +     %end;
23710     +   filename x;
23712     +   %doendm:
23713     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
23714     +%macro EM_SetProperties;
23716     +   /* train properties */
23717     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
23718     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
23719     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
23720     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
23721     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
23722     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
23723     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
23724     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
23725     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
23726     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
23727     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
23728     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
23729     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
23730     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
23731     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
23732     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
23733     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
23734     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
23735     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
23736     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
23737     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
23738     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
23739     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
23740     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
23741     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
23742     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
23743     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
23744     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
23745     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
23746     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
23747     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
23748     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
23749     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
23750     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
23751     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
23752     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
23753     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
23754     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
23755     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
23756     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
23757     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
23759     +   /* properties for interactive sample */
23760     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
23761     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
23762     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
23763     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
23765     +   /* report properties */
23766     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
23767     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
23768     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
23769     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
23770     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
23771     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
23772     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
23773     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
23774     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
23775     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
23776     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
23777     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
23778     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
23780     +   /* score properties */
23781     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
23782     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
23784     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
23786     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
23787     +  %global &nLevel;
23788     +  proc dmdb batch data=&indata
23789     +    classout=_tmp_dmdbout;
23790     +    class &target;
23791     +  run;
23792     +  data _tmp_dmdbout;
23793     +    set _tmp_dmdbout;
23794     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
23795     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
23796     +  run;
23797     +  data _null_;
23798     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
23799     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
23800     +    %let dsid = %sysfunc(close(&dsid));
23801     +     call symput("&nLevel", put(&_obs, Best12.));
23802     +  run;
23804     +  proc datasets lib=work nolist;
23805     +     delete _tmp_dmdbout;
23806     +  run;
23807     +  quit;
23808     +%Mend EM_CheckBinaryTargetLevel;
23811     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
23813     +  /* determine the number of obs in training data */
23814     +  proc sql;
23815     +    reset noprint;
23816     +    select count(*) into :em_nobs from &indata;
23817     +  quit;
23819     +  /* determine the number of input variables */
23820     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
23821     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
23823     +  /* retrieve targetEvent from decmeta */
23824     +  %let targetEvent=;
23825     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
23826     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
23827     +      data _null_;
23828     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
23829     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
23830     +      run;
23831     +    %end;
23832     +  %end;
23834     +  /* create targetTable if multipleTar eq Y */
23835     +  data temptarget;
23836     +    set &EM_DATA_VARIABLESET;
23837     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
23838     +  run;
23840     + /* data sets */
23841     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
23842     + %EM_GETNAME(key=EMTREE,        type=DATA);
23843     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
23844     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
23845     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
23846     + %EM_GETNAME(key=OUTNODES,      type=DATA);
23847     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
23848     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
23849     + %EM_GETNAME(key=OUTPATH,       type=DATA);
23850     + %EM_GETNAME(key=OUTRULES,      type=DATA);
23852     + /* files */
23853     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
23854     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
23856     + /* turn on pmml if requested */
23857     + %let nnpmml=0;
23858     + %if %symexist(EM_PMML) %then %do;
23859     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
23860     +       %let nnpmml=1;
23862     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
23863     +   %end;
23864     +%end;
23866     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
23868     +%if &nnpmml or &numClassTarget %then %do;
23870     +    /* create dmdb needed for pmml generation */
23871     +    %let tree_maxlevel = 512;
23872     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
23873     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
23874     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
23875     +      %end;
23876     +    %end;
23877     +    %if &tree_maxlevel gt 0 %then %do;
23878     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
23879     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
23880     +    %end;
23882     +    %let targetOrderString =;
23883     +    %let targetString = ;
23884     +    data _null_;
23885     +       length orderString nameString $10000;
23886     +       retain orderString nameString;
23887     +       set &em_data_variableset end=eof;
23888     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
23889     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
23890     +       %end;
23891     +       %else %do;
23892     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
23893     +       %end;          select(order);
23894     +         when('')        order ='DESC';
23895     +         when('FMTASC')  order='ASCFMT';
23896     +         when('FMTDESC') order='DESFMT';
23897     +         otherwise;
23898     +       end;
23899     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
23900     +       nameString = trim(nameString)!!' '!!trim(NAME);
23902     +       if eof then do;
23903     +          call symput('targetOrderString', trim(orderString));
23904     +          call symput('targetString', trim(nameString));
23905     +       end;
23906     +    run;
23908     +    %let arborkluge= "work._treeDMDB";
23910     +    proc dmdb batch data=&indata
23911     +    %if &nnpmml %then %do;
23912     +        PMML
23913     +    %end;
23914     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
23916     +      %if &nnpmml %then %do;
23917     +           %if "%EM_ID" ne "" %then %do;
23918     +             id %EM_ID;
23919     +           %end;
23920     +           %if &EM_NUM_CLASS gt 0 %then %do;
23921     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
23922     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
23923     +                  &targetOrderString;
23924     +           %end;
23925     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
23926     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
23927     +           %end;
23928     +           target &targetString %EM_INTERVAL_TARGET;
23929     +           %if "%EM_FREQ" ne "" %then %do;
23930     +             freq %EM_FREQ;
23931     +           %end;
23932     +      %end;
23933     +      %else %do;
23934     +         class  &targetOrderString;
23935     +         target &targetString %EM_INTERVAL_TARGET;
23936     +      %end;
23937     +    run;
23938     +    quit;
23940     +    proc datasets lib=work nolist;
23941     +       delete classout varout;
23942     +    run;
23943     +    quit;
23945     + %end;
23948     + /* run Arbor procedure */
23949     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
23950     +  proc arbor data=&INDATA
23952     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
23953     +    Leafsize = &EM_PROPERTY_LEAFSIZE
23954     +  %end;
23956     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
23957     +    Splitsize = &EM_PROPERTY_SPLITSIZE
23958     +  %end;
23960     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
23961     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
23962     +  %end;
23964     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
23965     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
23966     +  %end;
23968     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
23969     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
23970     +  %end;
23972     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
23973     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
23974     +  %end;
23975     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
23976     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
23977     +  %end;
23978     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
23979     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
23980     +  %end;
23982     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
23983     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
23984     +      alpha = &EM_PROPERTY_SIGLEVEL
23985     +    %end;
23986     +  %end;
23988     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
23989     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
23990     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
23991     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
23992     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
23994     +        padjust =
23995     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
23996     +          &chaid
23997     +        %end;
23998     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
23999     +          DEPTH
24000     +        %end;
24001     +      %end;
24002     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
24003     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
24004     +         pvars = &num_inputs
24005     +      %end;
24006     +    %end;
24007     +  %end;
24008     +  %else %do;
24009     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
24010     +         padjust = NONE
24011     +      %end;
24012     +  %end;
24014     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
24015     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
24016     +    Maxrules = &num_nrules
24017     +  %end;
24019     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
24020     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
24021     +    Maxsurrs = &num_nsurrs
24022     +  %end;
24024     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
24025     +     Missing=&EM_PROPERTY_MISSINGVALUE
24026     +  %end;
24028     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
24029     +     USEVARONCE
24030     +  %end;
24032     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
24033     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
24034     +  %end;
24037     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
24038     +    event = "&targetEvent"
24039     +  %end;
24041     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
24042     +     DECSEARCH
24043     +  %end;
24045     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
24046     +     PRIORSSEARCH
24047     +  %end;
24049     +  %if &arbor_1 ne %then %do;
24050     +    &arbor_1
24051     +  %end;
24053     +  %if &em_arbor ne %then %do;
24054     +     &em_arbor
24055     +  %end;
24056     +  ;
24057     + %end;
24058     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
24059     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
24060     +       Performance &EM_PROPERTY_PERFORMANCE
24061     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
24062     +         nodesize=&EM_PROPERTY_NODESAMPLE
24063     +       %end;
24064     +       ;
24065     +       interact;
24066     + %end;
24067     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
24068     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
24069     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
24070     +    %put &em_codebar;
24071     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
24072     +    %put &errormsg;
24073     +    %put &em_codebar;
24074     +    %goto doendm;
24075     +   %end;
24076     +   %else %do;
24077     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
24078     +       Performance &EM_PROPERTY_PERFORMANCE
24079     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
24080     +         nodesize=&EM_PROPERTY_NODESAMPLE
24081     +       %end;
24082     +       ;
24083     +       interact;
24084     +   %end;
24085     + %end;
24087     + %else %do;
24088     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
24089     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
24090     +    %put &em_codebar;
24091     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
24092     +    %put &errormsg;
24093     +    %put &em_codebar;
24094     +    %goto doendm;
24095     +   %end;
24096     +   %else %do;
24097     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
24098     +       Performance &EM_PROPERTY_PERFORMANCE
24099     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
24100     +         nodesize=&EM_PROPERTY_NODESAMPLE
24101     +       %end;
24102     +       ;
24103     +        interact;
24104     +   %end;
24105     + %end;
24107     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
24108     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
24109     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
24110     +    %end;
24112     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
24113     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
24114     +    %end;
24116     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
24117     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
24118     +    %end;
24120     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
24121     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
24122     +    %end;
24124     +    %if "%EM_FREQ" ne "" %then %do;
24125     +       freq %EM_FREQ;
24126     +    %end;
24128     +    %if "&multipleTar" eq "Y" %then %do;
24129     +       /* cycle through all target vars in variableset */
24130     +       %let tdsid = %sysfunc(open(temptarget));
24131     +       %if &tdsid %then %do;
24132     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
24133     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
24134     +          %do %while(^ %sysfunc(fetch(&tdsid)));
24135     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
24136     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
24137     +             target &var / level = &lvl
24138     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
24139     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
24140     +             %end;
24141     +             %else %if "&lvl" eq "INTERVAL" %then %do;
24142     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
24143     +             %end;
24144     +             %else %if "&lvl" eq "ORDINAL" %then %do;
24145     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
24146     +             %end;
24147     +          %end;
24148     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
24149     +       %end;
24150     +       useTarget variable = %EM_TARGET;
24151     +    %end;
24152     +    %else %do;
24153     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
24154     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
24155     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
24156     +      %end;
24157     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
24158     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
24159     +      %end;
24160     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
24161     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
24162     +      %end;
24163     +    %end;
24165     +    %if "&multipleTar" eq "N" %then %do;
24166     +      &EM_DEC_STATEMENT;
24167     +    %end;
24169     +    Performance &EM_PROPERTY_PERFORMANCE
24170     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
24171     +      nodesize=&EM_PROPERTY_NODESAMPLE
24172     +    %end;
24173     +    ;
24175     +    %if "&intFlag" eq "Y" %then %do;
24176     +       INTERACT Largest;
24177     +       Train maxnewdepth=0;
24178     +    %end;
24180     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
24181     +         Assess
24182     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
24183     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
24184     +              %put &em_codebar;
24185     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
24186     +              %put &errormsg;
24187     +              %put &em_codebar;
24188     +            %end;
24189     +            %else %do;
24190     +               Validata=&EM_IMPORT_VALIDATE
24191     +            %end;
24192     +         %end;
24193     +         %else %do;
24194     +           NoValidata
24195     +         %end;
24196     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
24197     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
24198     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
24199     +               %if &dsid %then %do;
24200     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
24201     +                 %do %while(^ %sysfunc(fetch(&dsid)));
24202     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
24203     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
24204     +                   %else %do;
24205     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
24206     +                      %else %let measure= MISC;
24207     +                   %end;
24208     +                 %end;
24209     +               %end;
24210     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24211     +            %end;
24212     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
24213     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
24214     +                 %let measure=ASE;
24215     +              %end;
24216     +              %else %do;
24217     +                 %let measure=MISC;
24218     +              %end;
24219     +            %end;
24220     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
24221     +              %let measure=ASE;
24222     +            %end;
24223     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
24224     +               %let measure = LIFT;
24225     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
24226     +               %if &dsid %then %do;
24227     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
24228     +                 %do %while(^ %sysfunc(fetch(&dsid)));
24229     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
24230     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
24231     +                 %end;
24232     +               %end;
24233     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24234     +            %end;
24235     +            measure=&measure
24236     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
24237     +               event = "&targetEvent"
24238     +            %end;
24239     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
24240     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
24241     +            %end;
24242     +         %end;
24243     +         %if "&multipleTar" eq "N" %then %do;
24244     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
24245     +               CV
24246     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
24247     +                 CVNITer = &EM_PROPERTY_CVNITER
24248     +               %end;
24249     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
24250     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
24251     +               %end;
24252     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
24253     +                 CVSeed = &EM_PROPERTY_CVSEED
24254     +               %end;
24255     +            %end;
24256     +         %end;
24257     +       %end;
24258     +      ;
24260     +      %if "&intFlag" ne "Y" %then %do;
24261     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
24262     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
24263     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
24264     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
24266     +          SUBTREE &subtree
24267     +          %if "&subtree" eq "NLEAVES" %then %do;
24268     +            =&EM_PROPERTY_NSUBTREE
24269     +          %end;
24270     +          ;
24271     +        %end;
24273     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
24274     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
24275     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
24276     +          %end;
24277     +       %end;
24278     +      %end;
24279     + %end;
24282     + MakeMacro nleaves = nleaves;
24283     + save
24284     + %if "&EM_USER_EMTREE" ne "" %then %do;
24285     +   MODEL=&EM_USER_EMTREE
24286     + %end;
24287     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
24288     +   SEQUENCE=&EM_USER_OUTSEQ
24289     + %end;
24290     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
24291     +   IMPORTANCE=&EM_USER_OUTIMPORT
24292     + %end;
24293     + %if "&EM_USER_OUTNODES" ne "" %then %do;
24294     +   NODESTAT=&EM_USER_OUTNODES
24295     + %end;
24296     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
24297     +   SUMMARY=&EM_USER_OUTSUMMARY
24298     + %end;
24299     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
24300     +   STATSBYNODE=&EM_USER_OUTSTATS
24301     + %end;
24302     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
24303     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
24304     + %end;
24305     + %if "&EM_USER_OUTPATH" ne "" %then %do;
24306     +   Pathlistnonmissing=&EM_USER_OUTPATH
24307     + %end;
24308     + %if "&EM_USER_OUTRULES" ne "" %then %do;
24309     +   RULES = &EM_USER_OUTRULES
24310     + %end;
24311     + ;
24313     + %if "&intFlag" ne "Y" %then %do;
24315     +   %let lookupString = ;
24316     +   %if ^%symexist(EM_OPTION) %then
24317     +      %let EM_OPTION=;
24319     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
24320     +      %let lookupString = LOOKUP=SELECT;
24321     +   %end;
24323     +   %let codetext=;
24324     +   %let norescodetxt=;
24326     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
24327     +     %let codetext=&codetext DUMMY;
24328     +     %let norescodetxt=&norescodetxt DUMMY;
24329     +   %end;
24330     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
24331     +     %let codetext=&codetext NOLEAFID;
24332     +     %let norescodetxt=&norescodetxt NOLEAFID;
24333     +   %end;
24334     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
24335     +     %let norescodetxt=&norescodetxt NOPRED;
24336     +   %end;
24338     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
24339     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
24341     +   %if &nnpmml %then %do;
24342     +     code pmml;
24343     +   %end;
24345     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
24346     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24347     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
24348     +   %end;
24349     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
24350     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
24351     +   %end;
24352     + %end;
24354     + run;
24355     + quit;
24357     + /*%em_checkerror(); */
24358     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
24359     +   /* Delete DMDB catalog */
24360     +   proc datasets lib=work nolist;
24361     +       delete _treeDMDB / mt=cat;
24362     +  run;
24363     +  %end;
24365     + %if &nnpmml %then %do;
24366     +    ods pmml close;
24367     + %end;
24369     +  %doendm:
24371     +%mend em_tree_runTreeProcedure;
24373     +%macro em_tree_createFitStats( multipleTar= );
24376     +  /* create targetTable is multipleTar eq Y */
24377     +  data temptarget;
24378     +    set &EM_DATA_VARIABLESET;
24379     +    where ROLE="TARGET";
24380     +  run;
24382     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
24383     +   data &EM_USER_EMOUTFIT;
24384     +     length target $32;
24385     +     merge work.fit_train
24386     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24387     +       work.fit_valid
24388     +     %end;
24389     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
24390     +       work.fit_test
24391     +     %end;
24392     +     ;
24393     +     %if "&multipleTar" eq "N" %then %do;
24394     +       target="%EM_TARGET";
24395     +     %end;
24396     +     %else %do;
24397     +       target = _TARGET_;
24398     +     %end;
24399     +     drop _NW_ _SUMW_
24400     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24401     +        _VSUMW_
24402     +     %end;
24403     +     ;
24404     +   run;
24406     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24407     +     proc datasets library=work nolist;
24408     +       delete fit_valid;
24409     +     run;
24410     +   %end;
24411     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
24412     +     proc datasets library=work nolist;
24413     +       delete fit_test;
24414     +     run;
24415     +   %end;
24417     +%mend em_tree_createFitStats;
24420     +%macro em_tree_makeEnglishRules;
24422     +  %EM_GETNAME(key=OUTNODES, type=DATA);
24423     +  %EM_GETNAME(key=OUTPATH, type=DATA);
24425     +  /* verify that necessary tables exist and if not, skip processing */
24426     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
24427     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
24428     +    %goto doendm;
24429     +  %end;
24430     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
24431     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
24432     +    %goto doendm;
24433     +  %end;
24435     +  /* determine length of variable in outpath dataset */
24436     +  %let vlength= ;
24437     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
24438     +  %if &dsid ne %then %do;
24439     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
24440     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
24441     +  %end;
24442     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
24444     +  data tempoutpath;
24445     +    length varname $&vlength;
24446     +    retain varname;
24447     +    set &EM_USER_OUTPATH;
24449     +    if ^missing(variable) then varname=variable;
24450     +    else if ^missing(var_name) then varname=var_name;
24451     +    output;
24452     +  run;
24454     +  /* create an array of generated predicted variable names */
24455     +  %let tree_pred_vars = ;
24456     +  %let tree_pred_label = ;
24457     +  %let numpred= 0;
24458     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
24460     +    data _null_;
24461     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
24462     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
24463     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
24464     +     if eof then
24465     +       call symput('numpred', strip(put(_N_, BEST.)));
24466     +    run;
24467     +  %end;
24469     +  /* determine if NPRIORS exists in outnodes  */
24470     +  %local nprior_flag;
24471     +  data _null_;
24472     +    set &EM_USER_OUTNODES(obs=2) end=eof;
24473     +    if eof then do;
24474     +      call symput('nprior_flag', strip(put(npriors, best.)));
24475     +    end;
24476     +  run;
24478     +  proc sort data=tempoutpath; by node; run;
24479     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
24481     +  data tempoutpath;
24482     +    merge tempoutpath(in=_a) outnodes(keep= node
24483     +    %if "&nprior_flag" ne "." %then %do;
24484     +      NPRIORS
24485     +    %end;
24486     +    %else %do;
24487     +      N
24488     +    %end;
24489     +    %if &numpred gt 0 %then %do;
24490     +      %do i=1 %to &numpred;
24491     +        &&tree_pred_vars&i
24492     +      %end;
24493     +    %end;
24494     +    );
24495     +    by node;
24496     +    if _a;
24497     +  run;
24499     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
24501     +  data _null_;
24502     +    file x;
24503     +    set tempoutpath;
24504     +    by node descending varname;
24505     +    retain origvar oldnode string;
24506     +    length origvar $32 oldnode 8 string $200;
24508     +    if _N_ = 1 then do;
24509     +      origvar = varname;
24510     +      oldnode = node;
24511     +    end;
24513     +    if first.node then do;
24514     +       put "&EM_CODEBAR";
24515     +       put " Node = " node;
24516     +       put "&EM_CODEBAR";
24517     +    end;
24519     +      if first.varname then do;
24520     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
24521     +            if MISSING(CHARACTER_VALUE) then do;
24522     +             if NUMERIC_VALUE ne .  then do;
24523     +              if ^first.node then do;
24524     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24525     +              end;
24526     +              else do;
24527     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24528     +              end;
24529     +             end;
24530     +            end;
24531     +            else do;
24532     +              if ^first.node then do;
24533     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24534     +              end;
24535     +              else do;
24536     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24537     +              end;
24538     +             end;
24539     +         end;
24540     +         else if RELATION in ("=") then do;
24541     +            if ^first.node then do;
24542     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
24543     +            end;
24544     +            else do;
24545     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
24546     +            end;
24547     +         end;
24548     +         else if RELATION in ("ISMISSING") then do;
24549     +            if ^first.node then do;
24550     +              string = " AND "|| strip(varname) || " equals Missing";
24551     +            end;
24552     +            else do;
24553     +              string = "if "|| strip(varname) ||" equals Missing";
24554     +            end;
24555     +         end;
24556     +         else if RELATION in ("ISNOTMISSING") then do;
24557     +            if ^first.node then do;
24558     +              string = " AND "|| strip(varname) || " equals All Values";
24559     +            end;
24560     +            else do;
24561     +              string = "if "|| strip(varname) ||" equals All Values";
24562     +            end;
24563     +         end;
24564     +         if ^missing(varname) then origvar = varname;
24565     +         oldnode=node;
24567     +      end;
24568     +      else do;
24569     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
24570     +          if MISSING(CHARACTER_VALUE) then do;
24571     +           if  NUMERIC_VALUE ne .  then do;
24572     +            if ^MISSING(string) then
24573     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24574     +            else
24575     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24576     +           end;
24577     +          end;
24578     +          else do;
24579     +            if ^MISSING(string) then
24580     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24581     +            else
24582     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24583     +          end;
24585     +         end;
24586     +         else if RELATION in ("=") then do;
24587     +           string = strip(string)||", "||strip(character_value);
24588     +         end;
24589     +         else if RELATION in ("ISMISSING") then do;
24591     +         end;
24592     +         if ^missing(varname) then origvar = varname;
24593     +         oldnode=node;
24594     +      end;
24595     +      if last.varname then do;
24596     +         if RELATION in ("ISMISSING") then do;
24597     +           if ^first.varname then do;
24598     +             string = strip(string) || " or MISSING";
24599     +           end;
24600     +         end;
24601     +         put string;
24602     +         if ^missing(varname) then origvar = varname;
24603     +         oldnode=node;
24604     +      end;
24606     +      if last.node then do;
24607     +         put "then ";
24608     +         put " Tree Node Identifier   = " node;
24610     +         %if "&nprior_flag" ne "." %then %do;
24611     +           put " Number of Observations = " NPRIORS;
24612     +         %end;
24613     +         %else %do;
24614     +           put " Number of Observations = " N;
24615     +         %end;
24617     +         %if &numpred gt 0 %then %do;
24618     +           %do i=1 %to &numpred;
24619     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
24620     +           %end;
24621     +         %end;
24623     +         put " ";
24624     +         if ^missing(varname) then origvar = varname;
24625     +         oldnode=node;
24626     +      end;
24628     +  run;
24630     +  proc datasets lib=work nolist;
24631     +    delete tempoutpath outnodes;
24632     +  run;
24634     +  %doendm:
24635     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree / view=EMWS1.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Stat_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =nat scho sec sect study town final final );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.STAT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree;
NOTE: There were 105193 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 105193 observations read from the data set EMWS1.STAT_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree Leafsize = 8 MinCatSize = 5 MaxBranch = 2 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 Maxsurrs = 4 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   nat scho sec sect study town
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   final
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Stat_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1489948 kilobytes of physical memory.
NOTE: Will use 105193 out of 105193 training cases.
NOTE: Using memory pool with 131896320 bytes.
NOTE: Passed training data 30 times.
NOTE: Training used 15112080 bytes of work memory.
NOTE: View EMWS1.STAT_VALIDATE.VIEW used (Total process time):
      real time           2.35 seconds
      cpu time            2.35 seconds
      
NOTE: There were 35064 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 160 subtrees. The largest has 319 nodes and 160 leaves.
NOTE: Using subtree with 279 nodes and 140 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 279 nodes and 140 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 140.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY STATSBYNODE=EMWS1.Tree_OUTSTATS TOPOLOGY=EMWS1.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree_OUTPATH RULES = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 6 observations and 7 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 10251 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 279 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 1058 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 3399 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 160 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 1672 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 279 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 105193 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
      
NOTE: There were 105193 observations read from the data set EMWS1.STAT_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Stat_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: View EMWS1.STAT_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 35064 observations read from the data set EMWS1.PART_VALIDATE.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Stat_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
NOTE: View EMWS1.STAT_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: There were 35064 observations read from the data set EMWS1.PART_TEST.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: There were 105193 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           2.69 seconds
      cpu time            2.70 seconds
      
NOTE: There were 105193 observations read from the data set EMWS1.STAT_TRAIN.
NOTE: There were 105193 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           2.72 seconds
      cpu time            2.71 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "final";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $5;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1058 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 1058 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_final_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_FINAL_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1058 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 1058 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 279 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 279 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_final );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1058 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 279 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 1058 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1058 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 1058 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: final = " P_final;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Classification\SAS Code\Second\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=15Dec2021:11:49:08,
      Create Time=15Dec2021:11:42:06

NOTE: 1550 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 1058 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20031991610318;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24637      
24638      *------------------------------------------------------------*;
24639      * End TRAIN: Tree;
24640      *------------------------------------------------------------*;

24641      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24642      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
24643      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24644      ;
MPRINT(EM_DIAGRAM):   ;
24645      ;
MPRINT(EM_DIAGRAM):   ;
24646      ;
MPRINT(EM_DIAGRAM):   ;
24647      ;
MPRINT(EM_DIAGRAM):   ;
24648      quit;
MPRINT(EM_DIAGRAM):   quit;
24649      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24650      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
24651      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24652      /*; *"; *'; */
24653      ;
MPRINT(EM_DIAGRAM):   ;
24654      run;
MPRINT(EM_DIAGRAM):   run;
24655      quit;
MPRINT(EM_DIAGRAM):   quit;
24656      /* Reset EM Options */
24657      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
24658      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
24659      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
24660      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
24661      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
24662      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
